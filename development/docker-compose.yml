x-docker-data: &netbox-docker-info
  image: netboxcommunity/netbox:v3.2
  restart: on-failure
  depends_on:
    - postgres
    - redis
    - redis-cache
    - netbox-worker
  env_file: env/netbox.env
  user: 'unit:root'
  volumes:
    # - ./configuration.py:/opt/netbox/netbox/netbox/configuration.py
    # - ./startup_scripts:/opt/netbox/startup_scripts:z,ro
    # - ./initializers:/opt/netbox/initializers:z,ro
    # - ./configuration:/etc/netbox/config:z,ro
    # - ./reports:/etc/netbox/reports:z,ro
    # - ./scripts:/etc/netbox/scripts:z,ro
    - netbox-media-files:/opt/netbox/netbox/media:z

services:
  rt_mysql:
    image: mariadb:latest
    restart: on-failure
    ports:
      - 3306:3306
    volumes:
      - ./rt_sql_initdb.d:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: racktables_dev_secret
      MYSQL_DATABASE: racktables
      MYSQL_USER: racktables
      MYSQL_PASSWORD: racktables_dev
  racktables:
    image: eltercera/docker-racktables
    environment:
      RACKTABLES_DB_HOST: rt_mysql
      RACKTABLES_DB_NAME: racktables
      RACKTABLES_DB_USERNAME: racktables
      RACKTABLES_DB_PASSWORD: racktables_dev
      # RACKTABLES_INIT_DB: "true"
      # RACKTABLES_INIT_SAMPLE_RACKS: "true"
      RACKTABLES_ADMIN_PASSWD: admin
      RACKTABLES_REQUIRE_LOCAL_ACCOUNT: "false"
    ports:
      - 8080:8080

  netbox: 
    <<: *netbox-docker-info
    ports:
      - 8000:8080

  netbox-worker:
    <<: *netbox-docker-info
    depends_on:
      - redis
      - postgres
    command:
      - /opt/netbox/venv/bin/python
      - /opt/netbox/netbox/manage.py
      - rqworker

  netbox-housekeeping:
    <<: *netbox-docker-info
    depends_on:
      - redis
      - postgres
    command:
      - /opt/netbox/housekeeping.sh

  # postgres
  postgres:
    image: postgres:14-alpine
    restart: on-failure
    env_file: env/postgres.env
    volumes:
    - netbox-postgres-data:/var/lib/postgresql/data

  # redis
  redis:
    image: redis:6-alpine
    restart: on-failure
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
      # env_file: env/redis.env
    environment:
      - REDIS_PASSWORD=H733Kdjndks81
    volumes:
      - netbox-redis-data:/data

  redis-cache:
    image: redis:6-alpine
    restart: on-failure
    environment:
      - REDIS_PASSWORD=t4Ph722qJ5QHeQ1qfu36
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    # env_file: env/redis-cache.env
  rt2nb_runner:
    image: python:3.9-bullseye
    restart: on-failure
    command:
      - sh
      - /opt/repo/development/rt2nb_runner_entrypoint.sh
    volumes:
      - ../:/opt/repo
    environment:
      - rt2nb_conf_file_name=conf.testing.yaml
      - rt2nb_hardware_map_file_name=hardware_map.yaml.sample
    depends_on:
      - netbox
      - rt_mysql

volumes:
  netbox-media-files:
    driver: local
  netbox-postgres-data:
    driver: local
  netbox-redis-data:
    driver: local
